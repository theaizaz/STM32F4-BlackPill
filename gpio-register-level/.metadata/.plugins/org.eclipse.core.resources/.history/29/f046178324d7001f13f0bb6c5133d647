/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 *
 * 				Steps to turn on on-board LED at register level
 * 				01 : configure system and ABP1 clock for GPIOC
 *
 ******************************************************************************
 */


#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

/* Clock configuration */
#define RCC_BASE_ADDR			(volatile uint32_t*)0x40023800
#define RCC_CR					(volatile uint32_t*)(RCC_BASE_ADDR + 0x00) 			/*clock control register*/
#define RCC_CR_HSEON			(1U<<16)
#define RCC_CR_HSERDY			(1U<<17)
#define RCC_CR_HSION			(1U<<0)

#define RCC_CFGR				(volatile uint32_t*)(RCC_BASE_ADDR + 0x08) 			/*clock configuration register*/
#define RCC_CFGR_SW				(1U<<1)
#define RCC_CFGR_SW_HSE          (1U << 0)                                   /* Set HSE as system clock */
#define RCC_CFGR_SWS_HSE         (1U << 2)

#define RCC_AHB1ENR				(volatile uint32_t*)(0x40023800 + 0x30) 			/*peripheral clock enable register*/
#define RCC_AHB1ENR_GPIOCEN		(1U<<2)


/* GPIO Configuration */
#define GPIOC_BASE_ADDR			(volatile uint32_t*)0x40020800
#define GPIOC_GPIOx_MODER		(volatile uint32_t*)(GPIOC_BASE_ADDR + 0x00)
#define GPIO13_MODER			(volatile uint32_t)(0x4000000) 						/* GPIO as Output */
#define GPIOC_GPIOx_ODR			(volatile uint32_t*)(0x40020800 + 0x14)
#define GPIO13_ODR				(uint32_t)(1<<13)

/* functions */
void init_clock(void);
void configure_gpio(void);
void toggle_led(void);

int main(void)
{
	init_clock();
	configure_gpio();
	*GPIOC_GPIOx_ODR |= GPIO13_ODR;
	*GPIOC_GPIOx_ODR &= ~GPIO13_ODR;
	*GPIOC_GPIOx_ODR |= GPIO13_ODR;
	*GPIOC_GPIOx_ODR &= ~GPIO13_ODR;

    /* Loop forever */
    for (;;){
    	toggle_led();
    }
}

void init_clock(void){
	/* Enable External clock */
//	*RCC_CR |=RCC_CR_HSEON;
//
//	/* poll for HSERDY */
//	while(!(*RCC_CR & RCC_CR_HSERDY)){
//		;
//	}
//
//	/* Once E clock is ready switch to it */
//	*RCC_CFGR |= RCC_CFGR_SW;
//
//	/* wait for switching completion */
//	while(!(*RCC_CFGR & RCC_CFGR_SW)){
//		;
//	}
//
//	/* disable internal clock */
//	*RCC_CR &= ~RCC_CR_HSION;

	/* enable GPIOC clock APB1 */
	*RCC_AHB1ENR |= RCC_AHB1ENR_GPIOCEN;

    printf("External clock enabled \n");
}



void configure_gpio(void){
	*GPIOC_GPIOx_MODER |= GPIO13_MODER;
    printf("Configured GPIO as Output\n");
}

void toggle_led(void){
	*GPIOC_GPIOx_ODR ^=GPIO13_ODR;
	for(uint16_t i = 0; i<100; i++){
		asm("nop");
	}
}
