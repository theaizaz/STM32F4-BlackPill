/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

/* Clock configuration */
#define RCC_BASE_ADDR		(uint32_t*)0x40023800
#define RCC_CR				(uint32_t*)(RCC_BASE_ADDR + 0x00) 			/*clock control register*/
#define RCC_CR_HSEON				   (1U<<16)
#define RCC_CR_HSERDY				   (1U<<17)
#define RCC_CR_HSION					(1U<<0)

#define RCC_CFGR			(uint32_t*)(RCC_BASE_ADDR + 0x08) 			/*clock configuration register*/
#define RCC_CFGR_SW			(1U<<1)


int main(void)
{
//    printf("RCC_CR_ADDR is %p\n", (void *)RCC_CR_ADDR_P);
//    printf("RCC_CR_VAL  is %ld\n", *(RCC_CR_ADDR_P));

    /* Loop forever */
    for (;;);
}

bool init_clock(void){
	/* Enable External clock */
	*RCC_CR |=RCC_CR_HSEON;

	/* poll for HSERDY */
	while(!(RCC_CR & RCC_CR_HSERDY)){
		;
	}

	/* Once E clock is ready switch to it */
	*RCC_CFGR |= RCC_CFGR_SW;

	/* wait for switching completion */
	while(!(*RCC_CFGR & RCC_CFGR_SW)){
		;
	}

	/* disable internal clock */
	*RCC_CR &= ~RCC_CR_HSION;

}
