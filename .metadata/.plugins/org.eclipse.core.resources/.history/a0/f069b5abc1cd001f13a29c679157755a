/*
 * ina226.h
 *
 *  Created on: Jan 6, 2025
 *      Author: aizaz
 */

#ifndef INC_INA226_H_
#define INC_INA226_H_

/* libraries */
#include "main.h"
#include <string.h>

/* Macros */
#define INA226_TIMEOUT			 100						 // ms
#define INA226_ADDRESS           (uint16_t){0x40<<1}
#define INA226_CONF_REG          (uint8_t){0x00} 			 // Configuration Register
//#define INA226_SHUNT_REG        (uint8_t){0x01}			 // Shunt Voltage Register
//#define INA226_BUS_REG          (uint8_t){0x02}			 // Bus Voltage Register
//#define INA226_PWR_REG          (uint8_t){0x03}			 // Power Register
#define INA226_CURRENT_REG       (uint8_t){0x04}			 // Current flowing through Shunt
#define INA226_CAL_REG           (uint8_t){0x05} 			 // Calibration Register
//#define INA226_MASK_EN_REG      (uint8_t){0x06}			 // Mask/Enable Register
//#define INA226_ALERT_LIMIT_REG  (uint8_t){0x07}			 // Alert Limit Register
//#define INA226_MAN_ID_REG       (uint8_t){0xFE}			 // Contains Unique Manbufacturer Identification Number
//#define INA226_ID_REG           (uint8_t){0xFF}			 // Contains unique ID



///* parameters, flag bits */
#define INA226_RST              (uint16_t){0x8000} //Reset
//#define INA226_AFF              {0x0010}; //Alert function flag
//#define INA226_CVRF             {0x0008}; //Conversion ready flag
//#define INA226_OVF              {0x0004}; //Overflow flags
//#define INA226_ALERT_POL        {0x0002}; //Alert pin polarity - if set then active-high
//////Latch enable - if set then alert flag remains until mask/enable register is read
//////if not set then flag is cleared after next conversion within limits
//#define INA226_LATCH_EN  		{0x0001};


/* Average time config Macros */
#define AVERAGE_1        		(uint16_t)0x0000
#define AVERAGE_4        		(uint16_t)0x0200
#define AVERAGE_16       		(uint16_t)0x0400
#define AVERAGE_64       		(uint16_t)0x0600
#define AVERAGE_128      		(uint16_t)0x0800
#define AVERAGE_256      		(uint16_t)0x0A00
#define AVERAGE_512      		(uint16_t)0x0C00
#define AVERAGE_1024     		(uint16_t)0x0E00

#define SHUNT_RESISTOR_VAL		0.03 //

/* Conversation time settings */
#define CONV_TIME_140   	(uint8_t)0b00000000
#define CONV_TIME_204   	(uint8_t)0b00000001
#define CONV_TIME_332   	(uint8_t)0b00000010
#define CONV_TIME_588   	(uint8_t)0b00000011
#define CONV_TIME_1100  	(uint8_t)0b00000100 // 1.1ms
#define CONV_TIME_2116  	(uint8_t)0b00000101
#define CONV_TIME_4156  	(uint8_t)0b00000110
#define CONV_TIME_8244  	(uint8_t)0b00000111

/* Mode settings */
#define POWER_DOWN      (uint8_t)0b00000000
#define TRIGGERED       (uint8_t)0b00000011
#define CONTINUOUS      (uint8_t)0b00000111

#define CORRECTION_FACTOR 0.004

/* extern's */
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

/* Variables */


/*
 * functions
 * */
HAL_StatusTypeDef ina226_init(void);
void ina228_reset(void);
HAL_StatusTypeDef i2c_transmit_IT(uint8_t reg, uint16_t data);
void config_ina226(void);
void setAverage(void);
void setConversionTime(void);
void setMeasureMode(void);
uint16_t i2c_receive(uint8_t reg);
void setCalibrationValue(void);
void setResistorRange(void);
float getCurrent_mA(void);

#endif /* INC_INA226_H_ */
